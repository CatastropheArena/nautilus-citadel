// Copyright (c), Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0


module app::twitter;

use std::string::{Self, String};
use enclave::enclave::{Self, Enclave};
use std::debug;

const TWEET_INTENT: u8 = 0;
const EInvalidSignature: u64 = 1;

public struct Twitter has key, store {
    id: UID,
    twitter_name: String,
    sui_address: vector<u8>,
}

/// Should match the inner struct T used for IntentMessage<T> in Rust.
public struct UserData has copy, drop {
    twitter_name: vector<u8>,
    sui_address: vector<u8>,
}

public struct TWITTER has drop {}

fun init(otw: TWITTER, ctx: &mut TxContext) {
    let cap = enclave::create_enclave_config(
        otw,
        std::string::utf8(b"twitter enclave"),
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr0
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr1
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // pcr2
        ctx,
    );
    transfer::public_transfer(cap, tx_context::sender(ctx))
}

public fun mint_nft<T>(twitter_name: vector<u8>, timestamp_ms: u64, sig: &vector<u8>, enclave: &Enclave<T>, ctx: &mut TxContext): Twitter {
    let sui_address = ctx.sender().to_bytes();
    std::debug::print(&string::utf8(b"sui_address"));
    std::debug::print(&sui_address);
    std::debug::print(&string::utf8(b"sig"));
    std::debug::print(sig);
    let res = enclave::verify_signature<T, UserData>(enclave, TWEET_INTENT, timestamp_ms, UserData { twitter_name, sui_address }, sig);
    assert!(res, EInvalidSignature);

    Twitter {
        id: object::new(ctx),
        twitter_name: string::utf8(twitter_name),
        sui_address,
    }
}

#[test]
fun test_twitter_flow() {
    use sui::test_scenario::{Self, ctx, next_tx};
    use sui::nitro_attestation;
    use enclave::enclave::{register_enclave, create_enclave_config, destroy_enclave, destroy_cap, update_pcrs, EnclaveConfig};
    let mut scenario = test_scenario::begin(@0x540ba39b0328acd14e100a8af76b7880e336abe08f806ada5643085794bd8aab);
    let mut clock = sui::clock::create_for_testing(ctx(&mut scenario));
    clock.set_for_testing(1745937093978);

    let cap = create_enclave_config(
        TWITTER {},
        string::utf8(b"twitter enclave"),
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        x"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        ctx(&mut scenario),
    );
    next_tx(&mut scenario, @0x540ba39b0328acd14e100a8af76b7880e336abe08f806ada5643085794bd8aab);

    let mut config = test_scenario::take_shared<EnclaveConfig<TWITTER>>(&scenario);
    config.update_pcrs(
        &cap,
        x"3fc152fc3e3e7c4783a969478fb147ceec64d54cb27c5a363b02be7a7e73a4011cb878d3cd16dde32b14f772ef3c729c",
        x"3fc152fc3e3e7c4783a969478fb147ceec64d54cb27c5a363b02be7a7e73a4011cb878d3cd16dde32b14f772ef3c729c",
        x"21b9efbc184807662e966d34f390821309eeac6802309798826296bf3e8bec7c10edb30948c90ba67310f7b964fc500a",
    );
    next_tx(&mut scenario, @0x1);

    // a valid attestation for the timestamp
    let payload = x"8444a1013822a0591121a9696d6f64756c655f69647827692d30303965343935393963353261623835362d656e633031393638316132616638373065386366646967657374665348413338346974696d657374616d701b0000019681fcc8d76470637273b00058303fc152fc3e3e7c4783a969478fb147ceec64d54cb27c5a363b02be7a7e73a4011cb878d3cd16dde32b14f772ef3c729c0158303fc152fc3e3e7c4783a969478fb147ceec64d54cb27c5a363b02be7a7e73a4011cb878d3cd16dde32b14f772ef3c729c02583021b9efbc184807662e966d34f390821309eeac6802309798826296bf3e8bec7c10edb30948c90ba67310f7b964fc500a0358308577c03e4c3645b82c0f95fdec90eb3b81136a470cdf04d61e3a0907a5a15a1182d43950738fcb95dee4aa96f1bd4512045830621679f38a24abb1b4c2a73a3bbc76f6c0402428e18dafa788ca16eb47b6314f52f7a5aa700c6f5a158633ded773543ea58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006b636572746966696361746559027f3082027b30820201a0030201020210019681a2af870e8c000000006810ce08300a06082a8648ce3d04030330818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30303965343935393963353261623835362e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3235303432393133303330315a170d3235303432393136303330345a308193310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753313e303c06035504030c35692d30303965343935393963353261623835362d656e63303139363831613261663837306538632e75732d656173742d312e6177733076301006072a8648ce3d020106052b81040022036200040737817b8f86624ae3e7fdf2a710b22d5dda4cd86eede30211e970d94dfd15ee1c875dc994cecb3cff60850457b87720c9ece6d7244d503b8d33467897f59b0fe42c2e456877f8e4eb1bc8eca2be251f649137ea85f09e2f90d23e3002f9f433a31d301b300c0603551d130101ff04023000300b0603551d0f0404030206c0300a06082a8648ce3d040303036800306502305c26584d0027582055c1128fd776a331835b9d7c7e0be16b7fc86e2804f477894aa951c21ead9d6b6e8e7adf88b972e60231008f0eaff2db22fcbc92b5507d1e4ec7e964e09abc58ea1a0e0831a643af9596e480969de99f36f0fa22d5cd8533a29dc268636162756e646c65845902153082021130820196a003020102021100f93175681b90afe11d46ccb4e4e7f856300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3139313032383133323830355a170d3439313032383134323830355a3049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b8104002203620004fc0254eba608c1f36870e29ada90be46383292736e894bfff672d989444b5051e534a4b1f6dbe3c0bc581a32b7b176070ede12d69a3fea211b66e752cf7dd1dd095f6f1370f4170843d9dc100121e4cf63012809664487c9796284304dc53ff4a3423040300f0603551d130101ff040530030101ff301d0603551d0e041604149025b50dd90547e796c396fa729dcf99a9df4b96300e0603551d0f0101ff040403020186300a06082a8648ce3d0403030369003066023100a37f2f91a1c9bd5ee7b8627c1698d255038e1f0343f95b63a9628c3d39809545a11ebcbf2e3b55d8aeee71b4c3d6adf3023100a2f39b1605b27028a5dd4ba069b5016e65b4fbde8fe0061d6a53197f9cdaf5d943bc61fc2beb03cb6fee8d2302f3dff65902c2308202be30820245a003020102021100a08fb31870a1746361157c9a8bce2e75300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3235303432363135303734355a170d3235303531363136303734355a3064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d366334316132303837376663333434372e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b8104002203620004c684fe5a4eface8cd19f52041196da66f41108e0ad9eec29d2d0c50903836830d4bf8202e915b05a55ea3d1bcfa94a34095386fab5886203264f1f8ca836647e62ad9033f05b29c63ca5f805099a7df85f354110b4d6b2cf4021726dac3ce41fa381d53081d230120603551d130101ff040830060101ff020102301f0603551d230418301680149025b50dd90547e796c396fa729dcf99a9df4b96301d0603551d0e04160414af62c1338023fec2cfecd504212f0b36febfae46300e0603551d0f0101ff040403020186306c0603551d1f046530633061a05fa05d865b687474703a2f2f6177732d6e6974726f2d656e636c617665732d63726c2e73332e616d617a6f6e6177732e636f6d2f63726c2f61623439363063632d376436332d343262642d396539662d3539333338636236376638342e63726c300a06082a8648ce3d040303036700306402303b1cff5b4bd4011a1e534a550f56f4b036ab53ae65177aae4020b3872eb7fd1dd9d72a7fa28d566c13c58ca2e4aae36d02303e91091118e32242a6c79a3b46026d4cf24eb18d08ece00e98be9d04bf2d369acf3f5c2cf016f49f5b01ffa19b7d3e70590319308203153082029ba0030201020211009c13a5f06eb89b73a5b55c8c6d55d329300a06082a8648ce3d0403033064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d366334316132303837376663333434372e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3235303432393130343231335a170d3235303530353033343231335a308189313c303a06035504030c33636163306631333061383530396633332e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c653076301006072a8648ce3d020106052b810400220362000438f87b7b3b1ee7969139e5fdf43f0995d114a40fc255641114923ede14fc0306aa4cf9be8d676fa429bfba56c219701aa464e2647e8b55ab69606bdaafdd63eddcf3269143e91172817d600c1a2837173d2362174b608838d3797d7babe9be92a381ea3081e730120603551d130101ff040830060101ff020101301f0603551d23041830168014af62c1338023fec2cfecd504212f0b36febfae46301d0603551d0e0416041457e31d087aa945cce15881c00ca5b6c308353693300e0603551d0f0101ff0404030201863081800603551d1f047930773075a073a071866f687474703a2f2f63726c2d75732d656173742d312d6177732d6e6974726f2d656e636c617665732e73332e75732d656173742d312e616d617a6f6e6177732e636f6d2f63726c2f32653562663231642d383262392d343062622d396365302d3032343133633635393132362e63726c300a06082a8648ce3d040303036800306502307a5d6ed429b4022598d615635a3160cb85df7d2503a22db8e6cfd8f32510653e24c50f8f8c7531b2f17f275bd88a39a1023100a930762f4b854f05e26601911495de2035eed875f5d7d17fb9c8c5b6297d2831cc2b34ea62d58e038fc06e38611266385902c3308202bf30820245a003020102021500988ec4d41631be49fda32bd109c4f1d058b641af300a06082a8648ce3d040303308189313c303a06035504030c33636163306631333061383530396633332e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c65301e170d3235303432393132343531365a170d3235303433303132343531365a30818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30303965343935393963353261623835362e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b81040022036200040bc29f3d46946f034e6a66cbef57a0f19426f2d3191af37a6712e11d09c1917de7406237cc5a6bff3f8ae09c5af5dc53e413bc4b3e76d01b430b2c09b294a5cc3b1c9812215589d95cb5d2d862253ff1364aba1fda7e9bfc6259f612dbb81a31a366306430120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020204301d0603551d0e041604141c0b0d74b76a05dbd15ae32df8a8fc2f238587b6301f0603551d2304183016801457e31d087aa945cce15881c00ca5b6c308353693300a06082a8648ce3d0403030368003065023100d33e8807a5c2aa3edc93d00dc6281032623f084d46e1bf97bc2a2634c2603854916db02d571a9951e1cf1bb4b421cec302302d1e2f72bff78d07a1ba4a920bda8f4cde1212aaf2da160e12b0b0d8943e40700a3368deb2a75e817d9ce8ff1cad93236a7075626c69635f6b657958208d8871a9497b098a9df2c4d786c7bb358a90e2c2455cd58d71b52515d2b438ed69757365725f64617461f6656e6f6e6365f658606277494e01adcc49cc90ee8802f9336a0d1cd09aba0fd273257291ab847ef73ecb8257fd5e99795d161667b801e2626dcb23f0355d95acd901c67e6332f36b4aacc30d838c420a863d44c37bad09fb8225fc76b554d65c60b86dbed665da5f07";
    let document = nitro_attestation::load_nitro_attestation(payload, &clock);
    // std::debug::print(&document);
    config.register_enclave(document, ctx(&mut scenario));

    next_tx(&mut scenario, @0x540ba39b0328acd14e100a8af76b7880e336abe08f806ada5643085794bd8aab);
    let enclave = test_scenario::take_shared<Enclave<TWITTER>>(&scenario);

    // using real enclave response for the current address
    // curl -X POST http://<PUBLIC_IP>:3000/process_data -H "Content-Type: application/json" -d '{"payload": {"user_url": "https://x.com/mystenintern/status/1852386957789114394" }}'
    // {"response":{"intent":0,"timestamp_ms":1744731581697,"data":{"twitter_name":[109,121,115,116,101,110,105,110,116,101,114,110],"sui_address":[16,28,232,134,85,88,224,132,8,184,63,96,238,158,120,132,61,3,213,71,200,80,203,225,44,181,153,225,120,51,221,62]}},"signature":"c1d19cd522f81033f5314623a87c92977e65d3b1efc03d64221e9128acb906fdd8339433408c8feb17653a0b92e4014d80a2a346d9415479efb8c8a38cfc400e"}
    let sig = x"44016c80cc30a04ec1e71377de74c186fbd82cf9c205c8c7ba945180c5703df11c793604f15e782c638fbbc47069def331d2da2d4acc1ddb05dcbccd06c5e20e";
    let twitter_name = b"luo_eurax";
    let nft = mint_nft(twitter_name,  1745937093978, &sig, &enclave, ctx(&mut scenario));
    assert!(string::utf8(twitter_name) == nft.twitter_name, 0);

    sui::transfer::transfer(nft, tx_context::sender(ctx(&mut scenario)));
    test_scenario::return_shared(config);
    clock.destroy_for_testing();
    destroy_cap(cap);
    destroy_enclave(enclave);
    test_scenario::end(scenario);
}